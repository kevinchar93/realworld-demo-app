# Real World App Backend Implementation 

An implementation of https://github.com/gothinkster/realworld in go lang as a way to learn the go programming language.

Expected functionality
=======================
Authenticate users via JWT (login/signup pages + logout button on settings page)
CRU- users (sign up & settings page - no deleting required)
CRUD Articles
CR-D Comments on articles (no updating required)
GET and display paginated lists of articles
Favorite articles
Follow other users

https://realworld-docs.netlify.app/docs/implementation-creation/features

See the docs in file://./docs/api/README.md


implement api for endpoint "User and Authentication":
    see doc for endpoint details file://./docs/api/Apis/UserAndAuthenticationApi.md
    ☐ model data for /user endpoint
    ☐ POST /users/login -> Existing user login
    ☐ POST  /users ->  Create a user
    ☐ GET   /user  -> Get current user
    ☐ PUT   /user  -> Update current user
---

implement api for endpoint "Tags":
    see doc for endpoint details file://./docs/api/Apis/TagsApi.md
    ☐ model data for /tags endpoint
    ☐ GET   /tags  -> Get tags
---


implement api for endpoint "Profile":
    see doc for endpoint details file://./docs/api/Apis/ProfileApi.md
    ☐ model data for /profiles endpoint
    ☐ GET   /profiles/{username}  -> Get a profile
    ☐ POST   /profiles/{username}/follow  -> Follow a user
    ☐ DELETE   /profiles/{username}/follow  -> Unfollow a user
---

implement api for endpoint "Articles":
    see doc for endpoint details file://./docs/api/Apis/ArticlesApi.md
    ☐ model data for /articles endpoint
    ☐ GET   /articles/feed  -> Get recent articles from users you follow
    ☐ GET   /articles  -> Get recent articles globally
    ☐ POST   /articles  -> Create an article
    ☐ GET   /articles/{slug}  -> Get an article
    ☐ PUT   /articles/{slug}  -> Update an article
    ☐ DELETE   /articles/{slug}  -> Delete an article
---

implement api for endpoint "Favorites":
    see doc for endpoint details file://./docs/api/Apis/FavoritesApi.md
    ☐ model data for /favourite endpoint
    ☐ POST   /articles/{slug}/favorite  -> Favorite an article
    ☐ DELETE   /articles/{slug}/favorite  -> Unfavorite an article
---

implement api for endpoint "Comments":
    see doc for endpoint details file://./docs/api/Apis/CommentsApi.md
    ☐ model data for /comments endpoint
    ☐ GET   /articles/{slug}/comments  -> Get comments for an article
    ☐ POST   /articles/{slug}/comments  -> Create a comment for an article
    ☐ DELETE   /articles/{slug}/comments/{id}  -> Delete a comment for an article
---


